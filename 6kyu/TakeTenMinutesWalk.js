/**
 * Прогуляйтесь десять минут пешком
 *
 * Вы живете в городе Картезия, где все дороги проложены по идеальной сетке.
 * Вы пришли на встречу на десять минут раньше назначенного времени,
 * поэтому решили воспользоваться возможностью и немного прогуляться.
 *
 * Город предоставляет своим гражданам приложение для создания маршрутов
 * на их телефонах - каждый раз, когда вы нажимаете кнопку,
 * оно отправляет вам массив однобуквенных строк, представляющих направления для ходьбы
 * (например. ['n', 's', 'w', 'e']).
 *
 * Вы всегда проходите только один квартал для каждой буквы (направление) и знаете,
 * что вам требуется одна минута, чтобы пересечь один городской квартал,
 * поэтому создайте функцию, которая вернет значение true,
 * если прогулка, которую вам предлагает приложение, займет у вас ровно десять минут
 * (вы же не хотите приходить рано или поздно!)
 * и, конечно же, вернет вас к вашей отправной точке.
 * В противном случае верните значение false.
 *
 * Примечание: вы всегда будете получать допустимый массив,
 * содержащий случайный набор букв направления (только 'n', 's', 'e' или 'w').
 * Он никогда не выдаст вам пустой массив (это не прогулка, это стояние на месте!).
 */

function isValidWalk(walk) {
  const obj = {};

  for (let path of walk) {
    if (!obj.hasOwnProperty(path)) {
      obj[path] = 1;
    } else {
      obj[path]++;
    }
  }

  return walk.length == 10 && obj.n == obj.s && obj.e == obj.w;
}

console.log(isValidWalk(["n", "s", "n", "s", "n", "s", "n", "s", "n", "s"]));
console.log(
  isValidWalk(["w", "e", "w", "e", "w", "e", "w", "e", "w", "e", "w", "e"])
);
console.log(isValidWalk(["w"]));
console.log(isValidWalk(["n", "n", "n", "s", "n", "s", "n", "s", "n", "s"]));
